#BlueJ class context
comment0.target=MineSweeper
comment0.text=\r\n\ \ Simple\ 'Minesweeper'\ program.\r\n\ \ There\ is\ a\ grid\ of\ squares,\ some\ of\ which\ contain\ a\ mine.\r\n\ \ The\ user\ can\ click\ on\ a\ square\ to\ either\ expose\ it\ or\ to\r\n\ \ mark/unmark\ it.\r\n\ \ \r\n\ \ If\ the\ user\ exposes\ a\ square\ with\ a\ mine,\ they\ lose.\r\n\ \ Otherwise,\ it\ is\ uncovered,\ and\ shows\ a\ number\ which\ represents\ the\r\n\ \ number\ of\ mines\ in\ the\ eight\ squares\ surrounding\ that\ one.\r\n\ \ If\ there\ are\ no\ mines\ adjacent\ to\ it,\ then\ all\ the\ unexposed\ squares\r\n\ \ immediately\ adjacent\ to\ it\ are\ exposed\ (and\ and\ so\ on)\r\n\r\n\ \ If\ the\ user\ marks\ a\ square,\ then\ they\ cannot\ expose\ the\ square,\r\n\ \ (unless\ they\ unmark\ it\ first)\r\n\ \ When\ all\ squares\ with\ mines\ are\ marked,\ and\ all\ the\ squares\ without\r\n\ \ mines\ are\ exposed,\ the\ user\ has\ won.\r\n
comment1.params=arguments
comment1.target=void\ main(java.lang.String[])
comment1.text=\ \r\n\ Construct\ a\ new\ MineSweeper\ object\r\n\ and\ set\ up\ the\ GUI\r\n
comment10.params=
comment10.target=void\ drawWin()
comment10.text=Draw\ a\ message\ telling\ the\ player\ they\ have\ won
comment11.params=
comment11.target=void\ drawLose()
comment11.text=\r\n\ Draw\ a\ message\ telling\ the\ player\ they\ have\ lost\r\n\ and\ expose\ all\ the\ squares\ and\ redraw\ them\r\n
comment2.params=
comment2.target=void\ setupGUI()
comment2.text=Set\ up\ the\ GUI\:\ buttons\ and\ mouse\ to\ play\ the\ game
comment3.params=action\ x\ y
comment3.target=void\ doMouse(java.lang.String,\ double,\ double)
comment3.text=Respond\ to\ mouse\ events
comment4.params=v
comment4.target=void\ setMarking(boolean)
comment4.text=\r\n\ Remember\ whether\ it\ is\ "Mark"\ or\ "Expose"\r\n\ Change\ the\ colour\ of\ the\ "Mark",\ "Expose"\ buttons\r\n
comment5.params=row\ col
comment5.target=void\ tryExpose(int,\ int)
comment5.text=\ \r\n\ The\ player\ has\ clicked\ on\ a\ square\ to\ expose\ it\r\n\ -\ if\ it\ is\ already\ exposed\ or\ marked,\ do\ nothing.\r\n\ -\ if\ it's\ a\ mine\:\ lose\ (call\ drawLose())\ \r\n\ -\ otherwise\ expose\ it\ (call\ exposeSquareAt)\r\n\ then\ check\ to\ see\ if\ the\ player\ has\ won\ and\ call\ drawWon()\ if\ they\ have.\r\n\ (This\ method\ is\ not\ recursive)\r\n
comment6.params=row\ col
comment6.target=void\ exposeSquareAt(int,\ int)
comment6.text=\ \r\n\ \ Expose\ a\ square,\ and\ spread\ to\ its\ neighbours\ if\ safe\ to\ do\ so.\r\n\ \ It\ is\ guaranteed\ that\ this\ square\ is\ safe\ to\ expose\ (ie,\ does\ not\ have\ a\ mine).\r\n\ \ If\ it\ is\ already\ exposed,\ we\ are\ done.\r\n\ \ Otherwise\ expose\ it,\ and\ redraw\ it.\r\n\ \ If\ the\ number\ of\ adjacent\ mines\ of\ this\ square\ is\ 0,\ then\r\n\ \ \ \ \ expose\ all\ its\ neighbours\ (which\ are\ safe\ to\ expose)\r\n\ \ \ \ \ (and\ if\ they\ have\ no\ adjacent\ mine,\ expose\ their\ neighbours,\ and\ ....)\r\n
comment7.params=row\ col
comment7.target=void\ mark(int,\ int)
comment7.text=\r\n\ Mark/unmark\ the\ square.\r\n\ If\ the\ square\ is\ exposed,\ don't\ do\ anything,\r\n\ If\ it\ is\ marked,\ unmark\ it.\r\n\ otherwise\ mark\ it\ and\ redraw.\r\n\ (Marking\ cannot\ make\ the\ player\ win\ or\ lose)\r\n
comment8.params=
comment8.target=boolean\ hasWon()
comment8.text=\ \r\n\ Returns\ true\ if\ the\ player\ has\ won\:\r\n\ If\ all\ the\ squares\ without\ a\ mine\ have\ been\ exposed,\ then\ the\ player\ has\ won.\r\n
comment9.params=
comment9.target=void\ makeGrid()
comment9.text=\r\n\ Construct\ a\ grid\ with\ random\ mines.\r\n
numComments=12
